{% extends 'layout.html.twig' %}

{% block html_title %}GALib, a genetic algorithm library{% endblock %}

{% block simple_body %}

{% markdown %}

# GALib
<img style="float: right;" src="{{ app.request.basepath }}/images/projects/220px-Ga.png" />
GALib is an arterial intelligence hobby project I created in 2010. It provides a foundation for
genetic algorithm driven algorithms. It is written in C#, completely open source and available
under the GNU General Public License.

Latest version: 0.1 (2010-01-22)

## Download

* [GALib 0.1 dll.zip](https://sourceforge.net/projects/csgalib/files/GALib%200.1%20dll.zip/download)
* [GALib 0.1 source.zip](https://sourceforge.net/projects/csgalib/files/GALib%200.1%20source.tar.gz/download)
* [Source code tarball](http://download-lib.svn.sourceforge.net/viewvc/csgalib.tar.gz?view=tar)

You can also download the code directly via SVN from the SourceForge source code repository,
at https://csgalib.svn.sourceforge.net/svnroot/csgalib. From a command line, you can call the following:

svn checkout https://csgalib.svn.sourceforge.net/svnroot/csgalib

## Background

I created this library while working on [Skynet]({{ app.request.basepath }}/projects/skynet),
an application that solves the Travelling Salesman Problem. The idea for creating that application came
to me after reading the first part of
[Bio-Inspired Artificial Intelligence](http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&tid=11657)
by Dario Floreano and Claudio Mattiussi. I figured I needed to do an implementation of what I've read
to test myself. All work was done in my free time.

## Using the library

This section explains how to create your own GA implementations using GALib. If you are not familiar
with how genetic algorithms work, you are advised to first have a good look at
[this Wikipedia article](https://en.wikipedia.org/wiki/Genetic_algorithm) and related pages.
This section will first introduce you how the actual evolution is done, and then how to create your
own specific implementation by specifying an individual type.

### Class diagram

![Class diagram]({{ app.request.basepath }}/images/projects/Galib0.1-classdiagram.gif)

### Population class

The [Population class](http://download-lib.svn.sourceforge.net/viewvc/csgalib/Population.cs?revision=6&view=markup)
is the core of GALib. It is a collection of individuals of a type you specify, on which evolution
(selection and reproduction) can be done. The evolution of the population is done on a background
thread, and can be done with rank based selection, truncated rank based selection, roulette wheel
selection and tournament selection. Events are fired every time a new generation has been created,
a new fittest individual has been found or the evolution is complete.

#### Constructor

The constructor allows you to specify some general properties that are likely to be different in multiple use cases. These are:

* `size` - Optional. Int32. The size of the population (# of individuals). Defaults to 100.
* `generations` - Optional. Int64. The maximum amount of generations in the evolution. Defaults to 100000.
* `stagnationLimit` - Optional. Int64. The maximum amount of generations with no fitness improvement. Defaults to 10000.

Population will automatically populate itself with size amount new individuals. Since Population is
a list of individuals, you can add, remove, and manipulate members yourself. This is however highly
discouraged once the evolution is running.

#### Evolution methods

You can choose between several selection algorithms.

**1. Rank based selection**

<p class="indented">Rank based selection allocates reproduction slots to individuals based on their fitness rank.
    You can initiate rank based selection with the DoRankBasedSelection method. Similarly you can do
    truncated rank selection, rank selection that only holds into account the n first individuals, by
    calling the DoTruncatedRankSelection method, which accepts an Int32 parameter indicating n.</p>

**2. Roulette wheel based selection**

<p class="indented">Roulette wheel selection allocates reproduction slots to individuals proportional to their fitness.
    You can initiate roulette wheel selection with the DoRouletteWheelSelection method.</p>

**3. Tournament based selection**

<p class="indented">Tournament based selection consists of allocating reproduction slots to the best individuals of a
    randomly chosen subsets. Population contains several overloaded DoTournamentBasedSelection methods,
    allowing you holds tournaments of a fixed size, or a variable size between two bounds, both specified
    either as amount of individuals, or percentage of the population size.</p>

You can stop the evolution by calling the CancelEvolution method. The worker thread on which evolution
is done will finish after the current generation has been completed.

After every generation, the individuals will be sorted according to their fitness, fittest first.
This means that populationInstance[0] will yield you the fittest individual for that generation, and
populationInstance[populationInstance.Count - 1] will get you the least fit member. You can also use
GetFittest to get a range of fittest individuals. It accepts an Int32 indicating the size of the
range, and a Boolean indicating whether elites should be included.

#### Events

The Population class contains 3 events that will be fired at various points through the evolutionary process.

* GenerationComplete (Object sender, GenerationCompleteEventArgs&lt;IndividualType&gt; e)

<p class="indented">Occurs every time a generation is complete. This means selection, reproduction
    and fitness determination have happened, in that order.
    <a href="http://download-lib.svn.sourceforge.net/viewvc/csgalib/GenerationCompleteEventArgs.cs?view=markup">GenerationCompleteEventArgs</a>
    contains the current generation number and fittest individual of the generation.</p>

* NewFittest (Object sender, NewFittestEventArgs&lt;IndividualType&gt; e)

<p class="indented">Occurs when a new overall fittest individual is found.
    <a href="http://download-lib.svn.sourceforge.net/viewvc/csgalib/NewFittestEventArgs.cs?view=markup">NewFittestEventArgs</a>
    contains the current generation number and overall fittest individual.</p>

* EvolutionComplete (Object sender, EvolutionCompleteEventArgs&lt;IndividualType&gt; e)

<p class="indented">Occurs when the evolution stops, either by reaching the maximum amount of
    generations, the stagnation limit, or user cancellation.
    <a href="http://download-lib.svn.sourceforge.net/viewvc/csgalib/EvolutionCompleteEventArgs.cs?view=markup">EvolutionCompleteEventArgs</a>
    contains the current generation number, the overall fittest individual and a boolean indicating
    whether the evolution was cancelled by the user.</p>

#### Properties

The underneath list contains the most important public properties of the Population class, which allow you to drastically change the working of the algorithm.

<table class="table table-striped table-bordered">
    <thead>
    <tr>
        <th>Property name</th>
        <th>Type</th>
        <th>Summary</th>
        <th>Requirements</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>Size</td>
        <td>Int32</td>
        <td>Gets or sets the size of the population (# of individuals).</td>
        <td>&gt;0</td>
    </tr>
    <tr>
        <td>MaximunGenerations</td>
        <td>Int64</td>
        <td>Gets or sets the maximum amount of generations in the evolution.</td>
        <td>&gt;0</td>
    </tr>
    <tr>
        <td>StagnationLimit</td>
        <td>Int64</td>
        <td>Gets or sets the maximum amount of generations with no fitness improvement.</td>
        <td>&gt;0</td>
    </tr>
    <tr>
        <td>MutationRatio</td>
        <td>Int32</td>
        <td>Gets or sets the percentage of mutation applied to the genotype of every individual during every generation.</td>
        <td>[0,100[</td>
    </tr>
    <tr>
        <td>ElitismPercentage</td>
        <td>Int32</td>
        <td>Gets or sets the percentage of elites in the population. Elites are the best individuals in a population, and are granted survival into the next generation.</td>
        <td>[0,100]</td>
    </tr>
    <tr>
        <td>ElitistsAmount</td>
        <td>Int32</td>
        <td>Gets or sets the amount of elites in the population. Elites are the best individuals in a population, and are granted survival into the next generation.</td>
        <td>[0, pop size]</td>
    </tr>
    <tr>
        <td>RemoveDuplicates</td>
        <td>Boolean</td>
        <td>Gets or sets if duplicates (identical individuals) should be prevented during the evolution.</td>
        <td></td>
    </tr>
    <tr>
        <td>RemoveTwins</td>
        <td>Boolean</td>
        <td>Gets or sets if duplicate twins (identical individuals from the same parents) should be prevented during crossover.</td>
        <td></td>
    </tr>
    <tr>
        <td>OverallFittest</td>
        <td>IndividualType</td>
        <td>Gets or sets if overall fittest individual.</td>
        <td></td>
    </tr>
    </tbody>
</table>

### Individuals

For your own implementation, you need to specify your own individual type(s). The definitions for
these types contain initialization, mutation and crossover methods, as well as the genotype specification
and fitness function. GALib provides scaffolding in the form of an
[IIndividual interface](http://download-lib.svn.sourceforge.net/viewvc/csgalib/IIndividual.cs?view=markup)
and Individual abstract class. You MUST implement the interface in your individual type definition to
be able to create a population of your type. You CAN (most likely should) inherit from Individual,
which will spare you some basic work, and implement IIndividual for you.

### Islands

I started creating an IslandGroup class to enable simultaneous but separated evolution on multiple
'islands'. However, I did not finish this class

## Points of Interest

Since my main motivation for creating this library was exercise, I learned a lot from building it.
This is the first C# library I've ever written, as well as the first time I've done any GA programming
(or AI in general). Abstracting the library in a way so that it can be used for GA in general was very
interesting, and required me to expanded my knowledge of how to use interfaces and inheritance and
use generics in a non-basic way for the first time.

## See also

* [SourceForge project page](http://sourceforge.net/projects/csgalib/)
* [The Code Project article about GALib](http://www.codeproject.com/KB/recipes/galib.aspx)
* [Skynet]({{ app.request.basepath }}/projects/skynet) - implementation of Travelling Salesman Problem using GALib
{% endmarkdown %}

{% endblock %}


